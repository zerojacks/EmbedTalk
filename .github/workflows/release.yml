name: "publish"

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version from tag
        run: echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Generate Changelog
        id: changelog
        run: |
          # 获取当前tag和上一个tag
          current_tag=${GITHUB_REF#refs/tags/}
          previous_tag=$(git tag --sort=-v:refname | grep "^v" | grep -A1 "^${current_tag}$" | tail -n1)
          
          if [ -n "$previous_tag" ]; then
            # 如果有上一个tag，获取两个tag之间的提交
            changelog=$(git log ${previous_tag}..${current_tag} --pretty=format:"* %s (%h)" --no-merges)
          else
            # 如果是第一个tag，获取所有提交
            changelog=$(git log ${current_tag} --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # 如果changelog为空，添加一个默认消息
          if [ -z "$changelog" ]; then
            changelog="* 首次发布"
          fi
          
          # 将更改日志保存到环境变量中，处理多行文本
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `EmbedTalk v${process.env.PACKAGE_VERSION}`,
              body: `# 更新日志\n\n${process.env.CHANGELOG}\n\n---\n\n下载并安装以下对应系统的安装包：`,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: 'https://registry.npmmirror.com'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: install frontend dependencies
        run: pnpm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          updaterJsonPreferNsis: true
          updaterJsonKeepUniversal: false

  generate-latest-json:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Generate latest.json
        run: |
          # Get version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Create latest.json structure
          cat > latest.json << EOF
          {
            "version": "${VERSION}",
            "notes": "${CHANGELOG}",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/EmbedTalk_${VERSION}_x64-setup.exe.zip"
              },
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/EmbedTalk_${VERSION}_x64.dmg.zip"
              }
            }
          }
          EOF
          
          # Upload latest.json to release
          gh release upload v${VERSION} latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ env.CHANGELOG }}
      
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri, generate-latest-json]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
